% State of minds %
#import "mods/bot/Carrier.mod2g".
#import "mods/bot/Defender.mod2g".
#import "mods/bot/Roamer.mod2g".

% Basics of the bot %
#import "mods/base/getPercepts.mod2g".
%#import "mods/base/getWeapon.mod2g".
#import "mods/base/getHealth.mod2g".
#import "mods/base/getArmour.mod2g".
#import "mods/base/getAmmo.mod2g".


init module {
	#import "mods/knowledge.prolog".
	beliefs {
		% Initially, we are going nowhere.
		% navigation(Status, Dest)
		navigation(none, none).
		
		% The bot spawns with 100 health and 0 armour.
		status(100,0).
		
		% We start with no armor, no powerups and a basic weapon.
		armor(none, none, none, none).
		powerup(none, none).
		currentWeapon(enforcer, primary).
		
		%%[PLACEHOLDER] delete if GOAL behaves %%
		orientation(none, none, none).
		weapon(none,none,none).
		score(0,0,0).
		flagState(none,none).
		item(none,none,none,none).
		flag(none,none,none).
		bot(none,none,none,none,none,none).
		pickup(none).
		pickup(none,none,none).
		slowVolume(none).
		path(none,none,none,none).
		
		% All modules
		at(none).
		target(none).
		
		% Weapon module
		wepList(none).
		priorities(none,none).
		hardList(none).
		wantWep(none).
		getWep(none).
		
		% getArmour module
		wantArmor(none).
		
		% Carrier
		preferedWeapons(none, none).
		
		% Roamer
		wantArmor(none).
		
		
		%%[END PLACEHOLDER]%%
	}
	program{
		% 'Send once' percepts, insert in the believe base.
		if bel( percept(self(UnrealID, NickName, Team))) then insert (self(UnrealID, NickName, Team) ).
		
		forall bel( percept(navPoint(UnrealID, location(X,Y,Z), NeighsUnrealIDList))) do insert (navPoint(UnrealID, location(X,Y,Z), NeighsUnrealIDList) ).
		forall bel( percept(base(Team, UnrealID))) do insert (base(Team, UnrealID) ).
		
		% Insert all the pickups in the believe base.
		forall bel( percept(pickup(UnrealID, Label, ItemType))) do insert (pickup(UnrealID, Label, ItemType) ).
		
		%%TEST%%
		
		
	}
	goals {
		prozac.
		
		% [PLACEHOLDER] Initialise goals, because GOAL is stupid
		getWep(none).
		heal(none).
		armor(none).
		ammo(none).
		takeFlag(none).
		bringBackFlag(none).
		pickUpFlag(none).
		%temporary
		grabStuff(none).
	}
	actionspec {
		% Make a best effort attempt to navigate to a certain location on the map.
		navigate(Destination) {
			pre{ not(navigation(navigating, _)) }
			post{ true }
		}
		% Stop
		stop {
			pre{ true }
			post{ true }
		}
		% Shoot a target
		shoot(TargetLabel) {
			pre{ true }
			post{ true }
		}
		% Prefer a weapon
		prefer(Weapon) {
			pre{ true }
			post{ true }
		}
		% Look at target
		look(TargetLabel) {
			pre{ true }
			post{ true }
		}
		% Respawn
		respawn {
			pre{ true }
			post{ true }
		}
		% Find a path
		path(From, To) {
			pre{ true }
			post{ true }
		}
		% Let the bot continue with what he was doing
		skip {
			pre{ true }
			post{ true }
		}
		% Deploy
		deploy {
			pre{ true }
			post{ true }
		}
	}
}

main module [exit=never] {
	
	program {
		% When the bot is stuck or there is no path, this should be taken care of.
		if bel( navigation(stuck, Destination) ) then respawn.
		if goal( pickUpFlag(Destination) ), bel( navigation(noPath, Destination) ) then drop( pickUpFlag(Destination) ).
		if goal( bringBackFlag(Destination) ), bel( navigation(noPath, Destination) ) then drop( bringBackFlag(Destination) ).
		if goal( takeFlag(Destination) ), bel( navigation(noPath, Destination) ) then drop( takeFlag(Destination) ).
		
		% Calculate path: priority 5.
		if goal( calculatePath(StartID, EndID) ) then path(StartID, EndID).
		% Go somewhere the bot needs to be: priority 4.
		if a-goal( grabStuff(UnrealID), not(UnrealID = none) ) then navigate(UnrealID).
		% Bring flag to our base: priority 3.
		if a-goal( bringBackFlag(UnrealID), not(UnrealID = none) ) then navigate(UnrealID).
		% Go pick up our flag: priority 2.
		if a-goal( pickUpFlag(UnrealID), not(UnrealID = none) ) then navigate(UnrealID).
		% Go get the flag: priority 1.
		if a-goal( takeFlag(UnrealID), not(UnrealID = none) ) then navigate(UnrealID).
		
	}
	
}

event module {
	
	program {
		% Percept Handling
		if bel(true) then getPercepts.
		
		if bel(true) then getHealth.
		
%		if bel(true) then getWeapon.
		
		if bel(true) then getArmour.
		
		if bel(true) then getAmmo.
	}
		
}