module Carrier{
	program [order=linearall]{
		
		%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		%% NO PERCEPTS IN THIS FILE %%
		%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%		
		
		% GOAL MANAGEMENT
			% If the bot sees another bot, then stop and try to shoot him.
			if bel( self(_, _, Team), bot(UnrealID, _, OtherTeam, _, _, _), not(Team = OtherTeam) ) then shoot(UnrealID).
		
			% Adopt goal to go get the other team's flag, if bot knows the flag is in the other team's base.
			if bel( self(_, _, Team), base(OtherTeam, UnrealID), not(Team = OtherTeam), flagState(OtherTeam, home) ) 
			 	then adopt( takeFlag(UnrealID)).
			 					 	
			% If bot believes he holds the flag, adopt goal to bring this flag to our team's base.
			%if bel( self(HolderUnrealID, NickName, Team), flag(OtherTeam, HolderUnrealID, Position), flagState(OtherTeam, held), 
			%	not(Team = OtherTeam), base(Team, UnrealID) ) then adopt( deliverFlag(UnrealID) ).
			
			% If bot believes he holds the enemy flag but our flag is gone, he should hang around our base until he can deliver the flag.
			if bel( self(HolderUnrealID, NickName, Team), flag(OtherTeam, HolderUnrealID, Position), not(Team = OtherTeam),
					base(Team, BaseID), flagState(Team,held), flagState(OtherTeam,held),
					navPoint(BaseID,location(X1,Y1,_),_), 
					pickup(Destination,_,_), 
					navPoint(Destination,location(X2,Y2,_),_), 
					distance(Dist,X1,Y1,X2,Y2), Dist<2000000) then adopt( goTo(Destination) ).
				
			% If bot has flag, send to everyone to alert them.
			%if bel( self(HolderUnrealID, NickName, Team), orientation(selfPos,_,_), flag(OtherTeam, HolderUnrealID, Position), flagState(OtherTeam, held), 
			%	not(Team = OtherTeam), base(Team, UnrealID), not(at(UnrealID)) ) then allother.sendonce(haveFlag(selfPos)).
			
			%%%%%%%%%%%%%%%%%%%%%%% Calculating path for weapon switching %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
			
			% Adopt goal to calculate a path to enemy
			%if bel( self(_, _, Team), orientation(Location, Rotation, Velocity), bot(UnrealID, _, OtherTeam, Position, _, _), not(Team = OtherTeam) )
			% then adopt ( calculatePath(Location, Position) ).
			 
			% Switch weapons when closer to or further away from enemies.
			%if bel( self(_, _, Team), path(Location, Position, Length, LocationList), bot(UnrealID, _, OtherTeam, Position, _, _), not(Team = OtherTeam),
			% 		orientation(Location, Rotation, Velocity), Length < 10, preferedWeapons(WeaponList, "short") )
			%	then prefer(WeaponList).
			%if bel( self(_, _, Team), path(Location, Position, Length, LocationList), bot(UnrealID, _, OtherTeam, Position, _, _), not(Team = OtherTeam),
			%		orientation(Location, Rotation, Velocity), Length >= 10, Length < 30, preferedWeapons(WeaponList, "mid") ) 
			%	then prefer(WeaponList).
			%if bel( self(_, _, Team), path(Location, Position, Length, LocationList), bot(UnrealID, _, OtherTeam, Position, _, _), not(Team = OtherTeam),
			%		orientation(Location, Rotation, Velocity), Length >= 30, preferedWeapons(WeaponList, "long") ) 
			%	then prefer(WeaponList).
			
			%%%%%%%%%%%%%%%%%%%%%%% Calculating path for weapon switching %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%			
	
	}
}