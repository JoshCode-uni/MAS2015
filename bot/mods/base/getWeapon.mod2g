module getWeapon [exit=nogoals] {
	%%% Go to getWeapon module when belief there is a weapon you don't have. %%%
	
	knowledge{
		
	% [PlaceHolder]	weapon/3 initiator to correct weird GOAL behaviour.
	weapon(none,none,none).
	
	% [PlaceHolder]	item/4 initiator to correct weird GOAL behaviour.
	item(none,none,none,none).
	
	% get weapon inventory in list form.
	wepList(List) :- weapon(X,_,_),
					not(member(X, List)),
					wepList([X|List]).	
					
	% weapon priority list, contains hardList without worse weapons then the ones in inventory.
	%Input requirement: insert hardList to start. List is output.
	priorities(List, Hlist) :- Hlist = [HH|TH],
								wepList(Inv),
								((not(member(HH,Inv)), 
									priorities([HH|List], TH));
								(member(HH, Inv), 
									priorities(List, TH))).
	priorities(X, []).
	
	%Hardcode base priorities list.
	hardList(List) :- List = [flak, stinger, linkgun, shockrifle, rocketlauncher, biorifle, sniperrifle].					
						
	% gives true if want weapon.
	wantWep(Weapon) :- hardList(HARD),
						priorities(List, HARD),
						member(Weapon, List).
						
	% getWep(Type) is true if it is in inventory.
	getWep(Weapon) :- (weapon(Weapon,_,_)).
	}
	
	goals {
		
	}
	
	program {
		
	}
}

event module getWeapon {
	
	program {
		
		%% Goal Handling %%
			% If I shoot with enforcer, get a weapon pronto.
			if  bel( currentWeapon(enforcer,_), pickup(Location,weapon,Type), wantWep(Type) ) then adopt( getWep(Location) ).
			
			% If I see a weapon that is not in inventory and better then current loadout, pickup.
			if bel( item(Location,weapon,Type,_), wantWep(Type)) then adopt( getWep(Location) ).
	}
	
}