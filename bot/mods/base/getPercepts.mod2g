module getPercepts{
	
	program [order=linearall] {
		% All common percepts here
		
		% MAILBOX MANAGEMENT (RECEIVE)
				forall bel( received(Sender, not(role(Agent, Role))) ) do delete(role(Agent, Role)).
				forall bel( received(Sender, role(Agent, Role)) ) do insert(role(Agent, Role)).

		% PERCEPT HANDLING
			%% PERCEPTS ABOUT SELF
				%%% Update the navigation state of the bot ('send on change' percept).
				forall bel( navigation(OldStatus, OldDest),  percept(navigation(Status, Destination)) )
					do delete( navigation(OldStatus, OldDest) ) + insert( navigation(Status, Destination) ).
					
				%%% Update the orientation of the bot ('send on change' percept).
				forall bel( orientation(OldLocation, OldRotation, OldVelocity),  percept(orientation(Location, Rotation, Velocity)) )
					do delete( orientation(OldLocation, OldRotation, OldVelocity) ) + insert( orientation(Location, Rotation, Velocity) ).	
					
				%%% Update the status of the bot ('send on change' percept).
				forall bel( status(OldHealth, OldArmour),  percept(status(Health, Armour, _, _)) )
					do delete( status(OldHealth, OldArmour) ) + insert( status(Health, Armour) ).
							
				%%% Update the current weapon that the bot is holding ('send on change' percept).
				forall bel( currentWeapon(OldWeaponType, OldFireMode),  percept(currentWeapon(WeaponType, FireMode)) )
					do delete( currentWeapon(OldWeaponType, OldFireMode) ) + insert( currentWeapon(WeaponType, FireMode) ).
				
				%%% Insert information about the weapon inventory ('send on change with negation' percept).
				forall bel( percept(weapon(WeaponType, Ammo, AltAmmo)) )
					do insert( weapon(WeaponType, Ammo, AltAmmo) ).
				%%% Update information about the weapon inventory ('send on change with negation' percept).
				forall bel( weapon(OldWeaponType, OldAmmo, OldAltAmmo), percept(not(weapon(OldWeaponType, OldAmmo, OldAltAmmo))) )
					do delete( weapon(OldWeaponType, OldAmmo, OldAltAmmo) ).
					
				%%% Update the powerup that the bot has ('send on change' percept).
				forall bel( powerup(OldType, OldDuration),  percept(powerup(Type, Duration)) )
					do delete( powerup(OldType, OldDuration) ) + insert( powerup(Type, Duration) ).
					
				%%% Update the armor that the bot is wearing ('send on change' percept).
				forall bel( armor(OldHelmet, OldVest, OldThighpad, OldShieldbelt),  percept(armor(Helmet, Vest, Thighpad, Shieldbelt)) )
					do delete( armor(OldHelmet, OldVest, OldThighpad, OldShieldbelt) ) + insert( armor(Helmet, Vest, Thighpad, Shieldbelt) ).
				
				%%% Update the score of the bot ('send on change' percept)
				forall bel( score(OldKills, OldDeaths, OldSuicides) ) do delete( score(OldKills, OldDeaths, OldSuicides) ).
				forall bel( percept(score(Kills, Deaths, Suicides)) ) do insert( score(Kills, Deaths, Suicides) ).
			
			%% PERCEPTS ABOUT THE MAP
				%%% Insert the current state of the flags ('send on change with negation' percept).
				forall bel( percept(flagState(Team, FlagState)) ) do insert( flagState(Team, FlagState) ).
				%%% Update the current state of the flags ('send on change with negation' percept).
				forall bel( flagState(Team, FlagState),  percept(not(flagState(Team, FlagState))) )
					do delete( flagState(Team, FlagState) ).
			
			%% PERCEPTS ABOUT VISION
				%%% Insert information about an item the bot sees ('send on change with negation' percept).
				forall bel( percept(item(UnrealID, Label, ItemType, Position)) ) do insert( item(UnrealID, Label, ItemType, Position) ).
				%%% Update information about an item the bot sees ('send on change with negation' percept).
				forall bel( item(OldUnrealID, OldLabel, OldItemType, OldPosition),  percept(not(item(OldUnrealID, OldLabel, OldItemType, OldPosition))) )
					do delete( item(OldUnrealID, OldLabel, OldItemType, OldPosition) ).
				
				%%% Insert information about the visibility of the flag to bot ('send on change with negation' percept).
				forall bel( percept(flag(Team, HolderUnrealID, Position)) ) do insert( flag(Team, HolderUnrealID, Position) ).
				%%% Update information about the visibility of the flag to bot ('send on change with negation' percept).
				forall bel( flag(Team, HolderUnrealID, Position),  percept(not(flag(Team, HolderUnrealID, Position))) )
					do delete( flag(Team, HolderUnrealID, Position) ).
				
				%%% Insert information about other bots that the bot sees ('send on change with negation' percept).
				forall bel( percept(bot(UnrealID, Name, Team, Position, Weapon, FireMode)) ) do insert( bot(UnrealID, Name, Team, Position, Weapon, FireMode) ).
				%%% Update information about other bots that the bot sees ('send on change with negation' percept).
				forall bel( bot(UnrealID, Name, Team, Position, Weapon, FireMode),  percept(not(bot(UnrealID, Name, Team, Position, Weapon, FireMode))) )
					do delete( bot(UnrealID, Name, Team, Position, Weapon, FireMode) ).	
				
				%%% Insert the items that the bot can pick up ('send on change with negation' percept).
				forall bel( percept(pickup(UnrealID)) ) do insert( pickup(UnrealID) ).
				%%% Update the items that the bot can pick up ('send on change with negation' percept).
				forall bel( pickup(UnrealID),  percept(not(pickup(UnrealID))) )
					do delete( pickup(UnrealID) ).
					
				%%% Insert the items that the bot can pick up ('send on change with negation' percept).
				forall bel( percept(pickup(UnrealID, Label, ItemType)) ) do insert( pickup(UnrealID, Label, ItemType) ).
				%%% Update the items that the bot can pick up ('send on change with negation' percept).
				forall bel( pickup(UnrealID, Label, ItemType),  percept(not(pickup(UnrealID, Label, ItemType))) )
					do delete( pickup(UnrealID, Label, ItemType) ).
				
				%%% Insert information about slow volume fields ('send on change with negation' percept).
				forall bel( percept(slowVolume(UnrealID)) ) do insert( slowVolume(UnrealID) ).
				%%% Update information about slow volume fields ('send on change with negation' percept).
				forall bel( slowVolume(UnrealID),  percept(not(slowVolume(UnrealID))) )
					do delete( slowVolume(UnrealID) ).
			
			%% PERCEPTS ABOUT BOT ACTIONS
				%%% Update path percept caused by the path action ('send on change' percept). We don't need to remove paths because the map doesn't change
				forall bel( percept(path(StartID, EndID, Length, LocationList)) ) do insert( path(StartID, EndID, Length, LocationList) ).
	}
	
}