init module {
	knowledge{
		% We are at a certain location if the IDs match, or ...
		at(UnrealID) :- navigation(reached, UnrealID).
		% if the coordinates are approximately equal.
		at(location(X, Y, Z)) :- navigation(reached, location(X1, Y1, Z1)), 
			round(X) =:= round(X1), round(Y) =:= round(Y1), round(Z) =:= round(Z1).
			
		% Go to a destination. We are at a certain location if the IDs match.
		goTo(UnrealID) :- navigation(reached, UnrealID).
		
		% Bring our flag back to our base. We are at a certain location if the IDs match.
		pickUpFlag(UnrealID) :- navigation(reached, UnrealID).
		
		% Bring the flag to our base. We are at a certain location if the IDs match.
		bringFlag(UnrealID) :- navigation(reached, UnrealID).
		
		% Get the flag from component. We are at a certain location if the IDs match.
		getFlag(UnrealID) :- navigation(reached, UnrealID).
		
		% Calculte a path from starting point to end point
		calculatePath(StartID, EndId) :- path(StartID, EndID, Length, LocationList).
		
		% Prefer these weapons given the range to enemy.
		preferedWeapons(WeaponList, Range) :- (Range = "short", WeaponList = [weapon(link_gun, primary), weapon(flak_cannon, primary), weapon(stinger_minigun, primary)]) ;
											  (Range = "mid", WeaponList = [weapon(flak_cannon, primary), weapon(stinger_minigun, primary), weapon(shock_rifle, primary)]) ;
											  (Range = "long", WeaponList = [weapon(stinger_minigun, primary), weapon(shock_rifle, primary)]).
	}
	
	beliefs{
		% Initially, we are going nowhere.
		navigation(none, none).
		
		% The bot spawns with 100 health and 0 armour.
		status(100,0).
		
		% We start with no armor, no powerups and a basic weapon.
		armor(none, none, none, none).
		powerup(none, none).
		currentWeapon(enforcer, primary).
	}
	program{
		% Save our initial location as our starting point.
		if bel( percept(orientation(Location, _, _)) ) then insert( target(Location) ).
		% Take a random navpoint as our target; note that it might not be reachable though.
		if bel( percept(navPoint(UnrealID, _, _))) then insert( target(UnrealID) ).
		
		% 'Send once' percepts, insert in the believe base.
		if bel( percept(self(UnrealID, NickName, Team))) then insert (self(UnrealID, NickName, Team) ).
		
		forall bel( percept(navPoint(UnrealID, location(X,Y,Z), NeighsUnrealIDList))) do insert (navPoint(UnrealID, location(X,Y,Z), NeighsUnrealIDList) ).
		forall bel( percept(base(Team, UnrealID))) do insert (base(Team, UnrealID) ).
		
		% Insert all the pickups in the believe base.
		forall bel( percept(pickup(UnrealID, Label, ItemType))) do insert (pickup(UnrealID, Label, ItemType) ).
	}
	actionspec{
		% Make a best effort attempt to navigate to a certain location on the map.
		navigate(Destination) {
			pre{ not(navigation(navigating, _)) }
			post{ true }
		}
		% Stop
		stop {
			pre{ true }
			post{ true }
		}
		% Shoot a target
		shoot(TargetLabel) {
			pre{ true }
			post{ true }
		}
		% Prefer a weapon
		prefer(Weapon) {
			pre{ true }
			post{ true }
		}
		% Look at target
		look(TargetLabel) {
			pre{ true }
			post{ true }
		}
		% Respawn
		respawn {
			pre{ true }
			post{ true }
		}
		% Find a path
		path(From, To) {
			pre{ true }
			post{ true }
		}
		% Let the bot continue with what he was doing
		skip {
			pre{ true }
			post{ true }
		}
		% Deploy
		deploy {
			pre{ true }
			post{ true }
		}
	}
}

main module {
	program{
		% When the bot is stuck or there is no path, this should be taken care of.
		if bel( navigation(stuck, Destination) ) then respawn.
		if bel( navigation(noPath, Destination) ) then drop( at(Destination) ).
		
		% Calculate path: priority 1.
		if goal( calculatePath(StartID, EndID) ) then path(StartID, EndID).
		
		% Go somewhere the bot needs to be: priority 2.
		if a-goal( goTo(UnrealID) ) then navigate(UnrealID).
		
		% Bring flag to our base: priority 3.
		if a-goal( bringFlag(UnrealID) ) then navigate(UnrealID).
		% Go pick up our flag: priority 4.
		if a-goal( pickUpFlag(UnrealID) ) then navigate(UnrealID).
		% Go get the flag: priority 5.
		if a-goal( getFlag(UnrealID) ) then navigate(UnrealID).
		
		% Try to go to our destination if we want to be there: priority 5.
		if goal( at(Destination) ) then navigate(Destination).
	}
}

event module {
	program {
		% MAILBOX MANAGEMENT (RECEIVE)
		
		% PERCEPT HANDLING
			%% PERCEPTS ABOUT SELF
				%%% Update the navigation state of the bot ('send on change' percept).
				forall bel( navigation(OldStatus, OldDest),  percept(navigation(Status, Destination)) )
					do delete( navigation(OldStatus, OldDest) ) + insert( navigation(Status, Destination) ).
					
				%%% Update the orientation of the bot ('send on change' percept).
				forall bel( orientation(OldLocation, OldRotation, OldVelocity),  percept(orientation(Location, Rotation, Velocity)) )
					do delete( orientation(OldLocation, OldRotation, OldVelocity) ) + insert( orientation(Location, Rotation, Velocity) ).	
					
				%%% Update the status of the bot ('send on change' percept).
				forall bel( status(OldHealth, OldArmour),  percept(status(Health, Armour, _, _)) )
					do delete( status(OldHealth, OldArmour) ) + insert( status(Health, Armour) ).
							
				%%% Update the current weapon that the bot is holding ('send on change' percept).
				forall bel( currentWeapon(OldWeaponType, OldFireMode),  percept(currentWeapon(WeaponType, FireMode)) )
					do delete( currentWeapon(OldWeaponType, OldFireMode) ) + insert( currentWeapon(WeaponType, FireMode) ).
				
				%%% Insert information about the weapon inventory ('send on change with negation' percept).
				forall bel( percept(weapon(WeaponType, Ammo, AltAmmo)) )
					do insert( weapon(WeaponType, Ammo, AltAmmo) ).
				%%% Update information about the weapon inventory ('send on change with negation' percept).
				forall bel( weapon(OldWeaponType, OldAmmo, OldAltAmmo), percept(not(weapon(OldWeaponType, OldAmmo, OldAltAmmo))) )
					do delete( weapon(OldWeaponType, OldAmmo, OldAltAmmo) ).
					
				%%% Update the powerup that the bot has ('send on change' percept).
				forall bel( powerup(OldType, OldDuration),  percept(powerup(Type, Duration)) )
					do delete( powerup(OldType, OldDuration) ) + insert( powerup(Type, Duration) ).
					
				%%% Update the armor that the bot is wearing ('send on change' percept).
				forall bel( armor(OldHelmet, OldVest, OldThighpad, OldShieldbelt),  percept(armor(Helmet, Vest, Thighpad, Shieldbelt)) )
					do delete( armor(OldHelmet, OldVest, OldThighpad, OldShieldbelt) ) + insert( armor(Helmet, Vest, Thighpad, Shieldbelt) ).
				
				%%% Update the score of the bot ('send on change' percept)
				forall bel( score(OldKills, OldDeaths, OldSuicides) ) do delete( score(OldKills, OldDeaths, OldSuicides) ).
				forall bel( percept(score(Kills, Deaths, Suicides)) ) do insert( score(Kills, Deaths, Suicides) ).
			
			%% PERCEPTS ABOUT THE MAP
				%%% Insert the current state of the flags ('send on change with negation' percept).
				forall bel( percept(flagState(Team, FlagState)) ) do insert( flagState(Team, FlagState) ).
				%%% Update the current state of the flags ('send on change with negation' percept).
				forall bel( flagState(Team, FlagState),  percept(not(flagState(Team, FlagState))) )
					do delete( flagState(Team, FlagState) ).
			
			%% PERCEPTS ABOUT VISION
				%%% Insert information about an item the bot sees ('send on change with negation' percept).
				forall bel( percept(item(UnrealID, Label, ItemType, Position)) ) do insert( item(UnrealID, Label, ItemType, Position) ).
				%%% Update information about an item the bot sees ('send on change with negation' percept).
				forall bel( item(OldUnrealID, OldLabel, OldItemType, OldPosition),  percept(not(item(OldUnrealID, OldLabel, OldItemType, OldPosition))) )
					do delete( item(OldUnrealID, OldLabel, OldItemType, OldPosition) ).
				
				%%% Insert information about the visibility of the flag to bot ('send on change with negation' percept).
				forall bel( percept(flag(Team, HolderUnrealID, Position)) ) do insert( flag(Team, HolderUnrealID, Position) ).
				%%% Update information about the visibility of the flag to bot ('send on change with negation' percept).
				forall bel( flag(Team, HolderUnrealID, Position),  percept(not(flag(Team, HolderUnrealID, Position))) )
					do delete( flag(Team, HolderUnrealID, Position) ).
				
				%%% Insert information about other bots that the bot sees ('send on change with negation' percept).
				forall bel( percept(bot(UnrealID, Name, Team, Position, Weapon, FireMode)) ) do insert( bot(UnrealID, Name, Team, Position, Weapon, FireMode) ).
				%%% Update information about other bots that the bot sees ('send on change with negation' percept).
				forall bel( bot(UnrealID, Name, Team, Position, Weapon, FireMode),  percept(not(bot(UnrealID, Name, Team, Position, Weapon, FireMode))) )
					do delete( bot(UnrealID, Name, Team, Position, Weapon, FireMode) ).	
				
				%%% Insert the items that the bot can pick up ('send on change with negation' percept).
				forall bel( percept(pickup(UnrealID)) ) do insert( pickup(UnrealID) ).
				%%% Update the items that the bot can pick up ('send on change with negation' percept).
				forall bel( pickup(UnrealID),  percept(not(pickup(UnrealID))) )
					do delete( pickup(UnrealID) ).
				
				%%% Insert information about slow volume fields ('send on change with negation' percept).
				forall bel( percept(slowVolume(UnrealID)) ) do insert( slowVolume(UnrealID) ).
				%%% Update information about slow volume fields ('send on change with negation' percept).
				forall bel( slowVolume(UnrealID),  percept(not(slowVolume(UnrealID))) )
					do delete( slowVolume(UnrealID) ).
			
			%% PERCEPTS ABOUT BOT ACTIONS
				%%% Update path for the same start and end ID's.
				forall bel( path(StartID, EndID, OldLength, OldLocationList), percept(path(StartID, EndID, Length, LocationList)) ) do delete (path(StartID, EndID, OldLength, OldLocationList)).
				%%% Update path percept caused by the path action ('send on change' percept). We don't need to remove paths because the map doesn't change
				forall bel( percept(path(StartID, EndID, Length, LocationList)) ) do insert( path(StartID, EndID, Length, LocationList) ).
				%forall bel( path(OldStartId, OldEndId, OldLength, [OldLocation]),  percept(path(StartId, EndId, Length, [Location])) )
				%	do delete( path(OldStartId, OldEndId, OldLength, [OldLocation]) ) + insert( path(StartId, EndId, Length, [Location]) ).

		%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		%% NO PERCEPTS BELOW THIS LINE %%
		%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%		
		
		% GOAL MANAGEMENT
			% If the bot sees no other bot, then he should look forward.
			if bel( not(bot(UnrealID, _, _, _, _, _)) ) then look(none).
			% If the bot sees another bot, then stop and try to shoot him.
			if bel( bot(UnrealID, _, blue, _, _, _) ) then look(UnrealID) + shoot(UnrealID).
			% If the bot percepts the enemyFlagCarrier, he should stop and shoot him so the flag will be dropped.
			if bel( bot(enemyFlagCarrier, _, _, _, _, _) ) then look(enemyFlagCarrier) + stop + shoot(enemyFlagCarrier).
			
			% Adopt goal to calculate a path to enemy
			if bel( orientation(Location, Rotation, Velocity), bot(UnrealID, _, blue, Position, _, _) ) then adopt ( calculatePath(Location, Position) ).
			% Switch weapons when closer to or further away from enemies.
			if bel( path(Location, Position, Length, LocationList), bot(UnrealID, _, blue, Position, _, _),
			 		orientation(Location, Rotation, Velocity), Length < 5, preferedWeapons(WeaponList, "short") )
				then prefer(WeaponList).
			if bel( path(Location, Position, Length, LocationList), bot(UnrealID, _, blue, Position, _, _),
					orientation(Location, Rotation, Velocity), Length >= 5, Length < 20, preferedWeapons(WeaponList, "mid") ) 
				then prefer(WeaponList).
			if bel( path(Location, Position, Length, LocationList), bot(UnrealID, _, blue, Position, _, _),
					orientation(Location, Rotation, Velocity), Length >= 20, preferedWeapons(WeaponList, "long") ) 
				then prefer(WeaponList).
		
	% Go get weapons to test EQUIPMENT strategy!
	if not( goal( goTo(_) ) ), bel( pickup(UnrealID, weapon, ItemType) ) then adopt( goTo(UnrealID) ).		
		
			% Adopt goal to get a weapon in the map, if the bot has not got any of these goals already.
		%	if not( goal( goTo(_) ) ), bel( currentWeapon(enforcer, _), pickup(UnrealID, weapon, ItemType) ) then adopt( goTo(UnrealID) ).
			
			% Adopt goal to pick up our flag when it is dropped.
		%	if bel( flagState(red, dropped), flag(red, none, Position), navPoint(UnrealID, Position, [NeigsUnrealID])) then adopt( pickUpFlag(UnrealID) ). 
			% Adopt goal to go get the other team's flag, if bot knows the flag is in the other team's base.
		%	if bel( base(blue, UnrealID), flagState(blue, home) ) then adopt( getFlag(UnrealID)).	
			% If bot believes he holds any flag, adopt goal to bring this flag to our team's base.
		%	if bel( flag(blue, HolderUnrealID, Position), flagState(blue, held), self(HolderUnrealID, NickName, Team), base(red, UnrealID) ) then adopt( bringFlag(UnrealID) ).
		
			%% If the current goal has been reached, pick a new goal.			
			if not( goal( at(_) ) ), bel( target(Destination) ) then adopt( at(Destination) ).
	}
}