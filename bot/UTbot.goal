init module {
	knowledge{
		% We are at a certain location if the IDs match, or ...
		at(UnrealID) :- navigation(reached, UnrealID).
		% if the coordinates are approximately equal.
		at(location(X, Y, Z)) :- navigation(reached, location(X1, Y1, Z1)), 
			round(X) =:= round(X1), round(Y) =:= round(Y1), round(Z) =:= round(Z1).
	}
	beliefs{
		% Initially, we are going nowhere.
		navigation(none, none).
		
		% The bot spawns with 100 health and 0 armour.
		status(100,0).
		
		% We start with no armor, no powerups and a basic weapon.
		armor(none, none, none, none).
		powerup(none, none).
		currentWeapon(enforcer, primary).
	}
	program{
		% Save our initial location as our starting point.
		if bel( percept(orientation(Location, _, _)) ) then insert( target(Location) ).
		% Take a random navpoint as our target; note that it might not be reachable though.
		if bel( percept(navPoint(UnrealID, _, _))) then insert( target(UnrealID) ).
		
		% 'Send once' percepts, insert in the believe base.
		if bel( percept(self(UnrealID, NickName, Team))) then insert (self(UnrealID, NickName, Team) ).
		forall bel( percept(navPoint(UnrealID, location(X,Y,Z), NeighsUnrealID))) do insert (navPoint(UnrealID, location(X,Y,Z), NeighsUnrealID) ).
		forall bel( percept(base(Team, UnrealID))) do insert (base(Team, UnrealID) ).
		
		% Insert all the pickups in the believe base.
		forall bel( percept(pickup(UnrealID, armor, ItemType))) do insert (pickup(UnrealID, armor, ItemType) ).
		forall bel( percept(pickup(UnrealID, weapon, ItemType))) do insert (pickup(UnrealID, weapon, ItemType) ).
		forall bel( percept(pickup(UnrealID, health, ItemType))) do insert (pickup(UnrealID, health, ItemType) ).
		forall bel( percept(pickup(UnrealID, other, ItemType))) do insert (pickup(UnrealID, other, ItemType) ).	
	}
	actionspec{
		% Make a best effort attempt to navigate to a certain location on the map.
		navigate(Destination) {
			pre{ not(navigation(navigating, _)) }
			post{ true }
		}
		% Stop
		stop {
			pre{ true }
			post{ true }
		}
		% Shoot a target
		shoot(TargetLabel) {
			pre{ true }
			post{ true }
		}
		% Prefer a weapon
		prefer([Weapon]) {
			pre{ true }
			post{ true }
		}
		% Look at target
		look(TargetLabel) {
			pre{ true }
			post{ true }
		}
		% Respawn
		respawn {
			pre{ true }
			post{ true }
		}
		% Find a path
		path(From, To) {
			pre{ true }
			post{ true }
		}
		% Let the bot continue with what he was doing
		skip {
			pre{ true }
			post{ true }
		}
		% Deploy
		deploy {
			pre{ true }
			post{ true }
		}
	}
}

main module {
	program{
		% Try to go to our destination if we want to be there.
		if goal( at(Destination) ) then navigate(Destination).
	}
}

event module {
	program {	
		% Update the navigation state of the bot ('send on change' percept).
		forall bel( navigation(OldStatus, OldDest),  percept(navigation(Status, Destination)) )
			do delete( navigation(OldStatus, OldDest) ) + insert( navigation(Status, Destination) ).
		
		% Update the orientation of the bot (send on change).
		forall bel( orientation(OldLocation, OldRotation, OldVelocity),  percept(orientation(Location, Rotation, Velocity)) )
			do delete( orientation(OldLocation, OldRotation, OldVelocity) ) + insert( orientation(Location, Rotation, Velocity) ).	
			
		% Update the status of the bot (send on change).
		forall bel( status(OldHealth, OldArmour),  percept(status(Health, Armour, _, _)) )
			do delete( status(OldHealth, OldArmour) ) + insert( status(Health, Armour) ).
					
		% Update the current weapon that the bot is holding (send on change).
		forall bel( currentWeapon(OldWeaponType, OldFireMode),  percept(currentWeapon(WeaponType, FireMode)) )
			do delete( currentWeapon(OldWeaponType, OldFireMode) ) + insert( currentWeapon(WeaponType, FireMode) ).
	
		% Insert information about the weapon inventory.
		forall bel( percept(weapon(WeaponType, Ammo, AltAmmo)) ) do insert( weapon(WeaponType, Ammo, AltAmmo) ).
		% Update the weapon inventory of the bot (send on change with negation).
		forall bel( weapon(OldWeaponType, OldAmmo, OldAltAmmo), percept(not(weapon(OldWeaponType, OldAmmo, OldAltAmmo))) )
			do delete( weapon(OldWeaponType, OldAmmo, OldAltAmmo) ).
			
		% Update the powerup that the bot has (send on change).
		forall bel( powerup(OldType, OldDuration),  percept(powerup(Type, Duration)) )
			do delete( powerup(OldType, OldDuration) ) + insert( powerup(Type, Duration) ).
			
		% Update the armor that the bot is wearing (send on change).
		forall bel( armor(OldHelmet, OldVest, OldThighpad, OldShieldbelt),  percept(armor(Helmet, Vest, Thighpad, Shieldbelt)) )
			do delete( armor(OldHelmet, OldVest, OldThighpad, OldShieldbelt) ) + insert( armor(Helmet, Vest, Thighpad, Shieldbelt) ).
			
		% Update the path that the bot took (send on change).
		forall bel( path(OldStartId, OldEndId, OldLength, [OldLocation]),  percept(path(StartId, EndId, Length, [Location])) )
			do delete( path(OldStartId, OldEndId, OldLength, [OldLocation]) ) + insert( path(StartId, EndId, Length, [Location]) ).
			
		% Insert information about an item the bot sees.
		forall bel( percept(item(UnrealID, Label, ItemType, Position)) ) do insert( item(UnrealID, Label, ItemType, Position) ).
		% Update information about an item the bot sees (send on change with negation).
		forall bel( item(OldUnrealID, OldLabel, OldItemType, OldPosition),  percept(not(item(OldUnrealID, OldLabel, OldItemType, OldPosition))) )
			do delete( item(OldUnrealID, OldLabel, OldItemType, OldPosition) ).
		
		% Insert information about other bots that the bot sees.
		forall bel( percept(bot(UnrealID, Name, Team, Position, Weapon, FireMode)) ) do insert( bot(UnrealID, Name, Team, Position, Weapon, FireMode) ).
		% Update information about other bots that the bot sees (send on change with negation).
		forall bel( bot(UnrealID, Name, Team, Position, Weapon, FireMode),  percept(not(bot(UnrealID, Name, Team, Position, Weapon, FireMode))) )
			do delete( bot(UnrealID, Name, Team, Position, Weapon, FireMode) ).	
			
		% Insert all the items that can be picked up.
		forall bel( percept(pickup(UnrealID))) do insert( pickup(UnrealID) ).
		% Update the items that the bot can pick up (send on change with negation).
		forall bel( pickup(UnrealID),  percept(not(pickup(UnrealID))) )
			do delete( pickup(UnrealID) ).

		% If the current goal has been reached, pick a new goal.			
		if not( goal( at(_) ) ), bel( target(Destination) ) then adopt( at(Destination) ).
	}
}
