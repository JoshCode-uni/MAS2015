% [ ] - Unassigned | [w] - Work in Progress | [x] - Implemented
% [ ] Protecting the Flag Carrier
% [ ] 
% [W] Flag handling (if somehow roamer has flag we don't want to get in a stalemate)
% [W] Powerup Strategy(very basic)
% [x] Armour Strategy (seems to work, pls review)
% [W] Health Strategy (Joshua, in modules, on hold)
% [ ] Weapon Strategy

#import "mods/base/emptyModule.mod2g".
#import "mods/base/getArmour.mod2g".

init module {
	knowledge{
		% We are at a certain location if the IDs match, or ...
		at(UnrealID) :- navigation(reached, UnrealID).
		
		% if the coordinates are approximately equal.
		at(location(X, Y, Z)) :- navigation(reached, location(X1, Y1, Z1)), 
			round(X) =:= round(X1), round(Y) =:= round(Y1), round(Z) =:= round(Z1).
			
		% WantArmor is true if we do not have that armor.
		wantArmor(Armor) :- armor(Helmet,Vest,Pants,Belt), ((Armor = 'armor_helmet', Helmet == 0); 
															(Armor = 'armor_vest', Vest == 0); 
															(Armor = 'armor_shield_belt', Belt == 0); 
															(Armor = 'armor_thighpads', Pants == 0)).
															
		% true if list contains X.
		listCon([H|T], X) :- H = X;
							listCon(T, X).
		
		% get weapon inventory in list form.
		wepList(List) :- weapon(X,_,_),
							listCon(List, X).
															
	}
	beliefs {
		% Initially, we are going nowhere.
		navigation(none, none).
		
		% The bot spawns with 100 health and 0 armour.
		status(100,0).
		
		% We start with no armor, no powerups and a basic weapon.
		armor(none, none, none, none).
		powerup(none, none).
		currentWeapon(enforcer, primary).
	}
	goals {
		killMeNow.
	}
	program{
		% 'Send once' percepts, insert in the believe base.
		if bel( percept(self(UnrealID, NickName, Team))) then insert (self(UnrealID, NickName, Team) ).
		
		forall bel( percept(navPoint(UnrealID, location(X,Y,Z), NeighsUnrealIDList))) do insert (navPoint(UnrealID, location(X,Y,Z), NeighsUnrealIDList) ).
		forall bel( percept(base(Team, UnrealID))) do insert (base(Team, UnrealID) ).
		
		% Insert all the pickups in the believe base.
		forall bel( percept(pickup(UnrealID, Label, ItemType))) do insert (pickup(UnrealID, Label, ItemType) ).
	}
	actionspec{
		% Make a best effort attempt to navigate to a certain location on the map.
		navigate(Destination) {
			pre{ not(navigation(navigating, _)) }
			post{ true }
		}
		% Stop
		stop {
			pre{ true }
			post{ true }
		}
		% Shoot a target
		shoot(TargetLabel) {
			pre{ true }
			post{ true }
		}
		% Prefer a weapon
		prefer([Weapon]) {
			pre{ true }
			post{ true }
		}
		% Look at target
		look(TargetLabel) {
			pre{ true }
			post{ true }
		}
		% Respawn
		respawn {
			pre{ true }
			post{ true }
		}
		% Find a path
		path(From, To) {
			pre{ true }
			post{ true }
		}
		% Let the bot continue with what he was doing
		skip {
			pre{ true }
			post{ true }
		}
		% Deploy
		deploy {
			pre{ true }
			post{ true }
		}
	}
}

main module [exit=nogoals] {
	program {
		%TEST%
		
		if bel( navigation(stuck, Destination) ) then respawn.
		if bel( navigation(noPath, Destination) ), goal( at(Destination) ) then drop( at(Destination) ).
		
		%if bel(true) then getArmour.
		% When the bot is stuck or there is no path, this should be taken care of.
		if bel (navigation(stuck, Destination)) then respawn.
		if bel( navigation(noPath, Destination) ), goal( at(Destination) ) then drop( at(Destination) ).
		
		% Try to go to our destination if we want to be there.
		if goal( at(Destination) ) then navigate(Destination).
	}
}

event module {
	program {
		% MAILBOX MANAGEMENT (RECEIVE)
		
		% PERCEPT HANDLING
			%% PERCEPTS ABOUT SELF
				%%% Update the navigation state of the bot ('send on change' percept).
				forall bel( navigation(OldStatus, OldDest),  percept(navigation(Status, Destination)) )
					do delete( navigation(OldStatus, OldDest) ) + insert( navigation(Status, Destination) ).
					
				%%% Update the orientation of the bot ('send on change' percept).
				forall bel( orientation(OldLocation, OldRotation, OldVelocity),  percept(orientation(Location, Rotation, Velocity)) )
					do delete( orientation(OldLocation, OldRotation, OldVelocity) ) + insert( orientation(Location, Rotation, Velocity) ).	
					
				%%% Update the status of the bot ('send on change' percept).
				forall bel( status(OldHealth, OldArmour),  percept(status(Health, Armour, _, _)) )
					do delete( status(OldHealth, OldArmour) ) + insert( status(Health, Armour) ).
							
				%%% Update the current weapon that the bot is holding ('send on change' percept).
				forall bel( currentWeapon(OldWeaponType, OldFireMode),  percept(currentWeapon(WeaponType, FireMode)) )
					do delete( currentWeapon(OldWeaponType, OldFireMode) ) + insert( currentWeapon(WeaponType, FireMode) ).
				
				%%% Insert information about the weapon inventory ('send on change with negation' percept).
				forall bel( percept(weapon(WeaponType, Ammo, AltAmmo)) )
					do insert( weapon(WeaponType, Ammo, AltAmmo) ).
				%%% Update information about the weapon inventory ('send on change with negation' percept).
				forall bel( weapon(OldWeaponType, OldAmmo, OldAltAmmo), percept(not(weapon(OldWeaponType, OldAmmo, OldAltAmmo))) )
					do delete( weapon(OldWeaponType, OldAmmo, OldAltAmmo) ).
					
				%%% Update the powerup that the bot has ('send on change' percept).
				forall bel( powerup(OldType, OldDuration),  percept(powerup(Type, Duration)) )
					do delete( powerup(OldType, OldDuration) ) + insert( powerup(Type, Duration) ).
					
				%%% Update the armor that the bot is wearing ('send on change' percept).
				forall bel( armor(OldHelmet, OldVest, OldThighpad, OldShieldbelt),  percept(armor(Helmet, Vest, Thighpad, Shieldbelt)) )
					do delete( armor(OldHelmet, OldVest, OldThighpad, OldShieldbelt) ) + insert( armor(Helmet, Vest, Thighpad, Shieldbelt) ).
				
				%%% Update the score of the bot ('send on change' percept)
				forall bel( score(OldKills, OldDeaths, OldSuicides) ) do delete( score(OldKills, OldDeaths, OldSuicides) ).
				forall bel( percept(score(Kills, Deaths, Suicides)) ) do insert( score(Kills, Deaths, Suicides) ).
			
			%% PERCEPTS ABOUT THE MAP
				%%% Insert the current state of the flags ('send on change with negation' percept).
				forall bel( percept(flagState(Team, FlagState)) ) do insert( flagState(Team, FlagState) ).
				%%% Update the current state of the flags ('send on change with negation' percept).
				forall bel( flagState(Team, FlagState),  percept(not(flagState(Team, FlagState))) )
					do delete( flagState(Team, FlagState) ).
			
			%% PERCEPTS ABOUT VISION
				%%% Insert information about an item the bot sees ('send on change with negation' percept).
				forall bel( percept(item(UnrealID, Label, ItemType, Position)) ) do insert( item(UnrealID, Label, ItemType, Position) ).
				%%% Update information about an item the bot sees ('send on change with negation' percept).
				forall bel( item(OldUnrealID, OldLabel, OldItemType, OldPosition),  percept(not(item(OldUnrealID, OldLabel, OldItemType, OldPosition))) )
					do delete( item(OldUnrealID, OldLabel, OldItemType, OldPosition) ).
				
				%%% Insert information about the visibility of the flag to bot ('send on change with negation' percept).
				forall bel( percept(flag(Team, HolderUnrealID, Position)) ) do insert( flag(Team, HolderUnrealID, Position) ).
				%%% Update information about the visibility of the flag to bot ('send on change with negation' percept).
				forall bel( flag(Team, HolderUnrealID, Position),  percept(not(flag(Team, HolderUnrealID, Position))) )
					do delete( flag(Team, HolderUnrealID, Position) ).
				
				%%% Insert information about other bots that the bot sees ('send on change with negation' percept).
				forall bel( percept(bot(UnrealID, Name, Team, Position, Weapon, FireMode)) ) do insert( bot(UnrealID, Name, Team, Position, Weapon, FireMode) ).
				%%% Update information about other bots that the bot sees ('send on change with negation' percept).
				forall bel( bot(UnrealID, Name, Team, Position, Weapon, FireMode),  percept(not(bot(UnrealID, Name, Team, Position, Weapon, FireMode))) )
					do delete( bot(UnrealID, Name, Team, Position, Weapon, FireMode) ).	
				
				%%% Insert the items that the bot can pick up ('send on change with negation' percept).
				forall bel( percept(pickup(UnrealID)) ) do insert( pickup(UnrealID) ).
				%%% Update the items that the bot can pick up ('send on change with negation' percept).
				forall bel( pickup(UnrealID),  percept(not(pickup(UnrealID))) )
					do delete( pickup(UnrealID) ).
				
				%%% Insert information about slow volume fields ('send on change with negation' percept).
				forall bel( percept(slowVolume(UnrealID)) ) do insert( slowVolume(UnrealID) ).
				%%% Update information about slow volume fields ('send on change with negation' percept).
				forall bel( slowVolume(UnrealID),  percept(not(slowVolume(UnrealID))) )
					do delete( slowVolume(UnrealID) ).
			
			%% PERCEPTS ABOUT BOT ACTIONS
				%%% Update path percept caused by the path action ('send on change' percept). We don't need to remove paths because the map doesn't change
				forall bel( percept(path(StartID, EndID, Length, LocationList)) ) do insert( path(StartID, EndID, Length, LocationList) ).
				%forall bel( path(OldStartId, OldEndId, OldLength, [OldLocation]),  percept(path(StartId, EndId, Length, [Location])) )
				%	do delete( path(OldStartId, OldEndId, OldLength, [OldLocation]) ) + insert( path(StartId, EndId, Length, [Location]) ).

		% GOAL MANAGEMENT
			%% If I see a big health pack and health is 180 or less, make pack new goal.
			if  not( goal( at(_) ) ), bel( pickup(Destination,health,super_health), status(Health,_), Health@=<180, not(at(Destination))) then adopt( at(Destination) ).
			
			%% If I see a health pack and health is lower then 100, make pack new goal.
			if not( goal( at(_) ) ), bel( pickup(Destination,health,_), status(Health,_), Health@<100, not(at(Destination))) then adopt( at(Destination) ).
			
			%% If I see a weapon that is not in inventory, make weapon new goal. (Expansion: pickup better weapons only)
			if not( goal( at(_) ) ), bel( pickup(Destination,weapon,Type),not(weapon(Type,_,_)), not(at(Destination)) ) then adopt( at(Destination) ).
			
			%% If I see ammo for a weapon I have and ammo count is 5 or lower, make ammo new goal.
			if not( goal( at(_) ) ), bel( pickup(Destination,ammo,Weapon), not(at(Destination)), weapon(Weapon,Ammo,_), Ammo@=<5 ) then adopt( at(Destination) ).
			
			%% If I see armor and wantArmor(Type), then make armor goal.
			if not( goal( at(_) ) ), bel( pickup(Destination,armor,Type),wantArmor(Type), not(at(Destination))) then adopt( getArmour(Destination) ).
			
			%% If I see pickup and I am not under effect of one, make pickup new goal. 
			if not( goal( at(_) ) ), bel( pickup(Destination,other,_), powerup(Type,Time), Time@=<1, not(at(Destination))) then adopt( at(Destination) ).
			
			%% If I have no goals, go to enemy base. (Placeholder, needs to do something productive once supercharged)
			if not( goal( at(_) ) ), bel( self(_, _, Team), status(Health,_), Health@=<180, base(OtherTeam, UnrealID), not(Team = OtherTeam), not(at(Destination))) then adopt( at(Destination)).
			
			%% If I have flag, bring back to base.
			if not( goal( at(_) ) ), bel( flag(blue, HolderUnrealID, Position), 
					flagState(blue, held), self(HolderUnrealID, _, _), 
					base(red, Destination) ) then adopt( bringFlag(Destination) ).
	}
}
